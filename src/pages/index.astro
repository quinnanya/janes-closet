---
import Head from "../components/Head.astro";
import StyledSelect from "../components/StyledSelect.astro";
import Icon from "../components/Icon.astro";
import { memes, memeTypes } from "../dataset.mjs";

import styles from "../styles/styles.css";
import suchoLogo from "../img/sucho-logo.32x32.png";

const title = "SUCHO Meme Wall";
const description =
  "Collected memes from the SUCHO project concerning the Russian invasion of Ukraine.";
---

<html lang="en">
  <Head {title} {description} />
  <body>
    <header>
      <h1>
        <img src={suchoLogo} alt="SUCHO" />
        <a href={Astro.site.pathname} title="SUCHO Meme Wall"
          >SUCHO Meme Wall
        </a>
      </h1>
      <div class="controls">
        <span class="count">{memes.length} / {memes.length}</span>
        <StyledSelect title="Filter Memes">
          <option value="" disabled selected>-- Filter by Meme Type --</option>
          {Array.from(memeTypes).map((memeType) => (
            <option value={memeType}>
              {memeType} [
              {memes.filter((meme) => meme.memeTypes.includes(memeType)).length}
              ]
            </option>
          ))}
        </StyledSelect>
        <button title="Shuffle Memes"><Icon name="shuffle" /></button>
      </div>
    </header>
    <main id="meme-wall" class="loading">
      {memes.map((meme, idx) => (
        <div data-types={meme.memeTypes.join("|")}>
          {idx < 20 ? (
            <img
              src={Astro.site.pathname + meme.mediaPath}
              style={`aspect-ratio: ${meme.aspectRatio};background-image: url(${meme.thumbnail})`}
            />
          ) : (
            <img
              data-src={Astro.site.pathname + meme.mediaPath}
              style={`aspect-ratio: ${meme.aspectRatio};background-image: url(${meme.thumbnail})`}
            />
          )}

          <section>
            <dl>
              <dt>Title:</dt>
              <dd>{meme.title}</dd>
              <dt>Translation:</dt>
              <dd>{meme.textTranslatedIntoEnglish}</dd>
            </dl>
          </section>
        </div>
      ))}
    </main>
  </body>
</html>

<script type="module" hoist>
  import ZoomWall from "../lib/zoomwall.js";

  let zoomwall;
  const wall = document.getElementById("meme-wall");
  const images = wall.querySelectorAll("[data-src]");
  const selectFilter = document.querySelector("select");

  zoomwall = new ZoomWall(wall);
  zoomwall.resize();
  wall.classList.remove("loading");

  const enableLazyLoading = () => {
    const imageObserver = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const image = entry.target;
            image.src = image.dataset.src;
            image.removeAttribute("data-src");
            imageObserver.unobserve(image);
          }
        });
      },
      { root: wall, rootMargin: "0px 0px 100% 0px" },
    );
    images.forEach((image) => imageObserver.observe(image));
  };

  document.addEventListener("DOMContentLoaded", enableLazyLoading);

  const updateCount = () => {
    const count = document.querySelector("span.count");
    count.textContent =
      wall.querySelectorAll("img:not(.hidden").length +
      " / " +
      wall.querySelectorAll("img").length;
  };

  const shuffle = () => {
    wall.classList.add("loading");
    selectFilter.value = "";
    setTimeout(() => {
      zoomwall.reset();
      zoomwall.destroy();
      wall.querySelectorAll("img").forEach((img) => {
        img.style.removeProperty("width");
        img.style.removeProperty("height");
        img.classList.remove("hidden");
      });
      updateCount();
      // Modified Fisherâ€“Yates shuffle
      for (let i = wall.children.length; i >= 0; i--) {
        wall.appendChild(wall.children[(Math.random() * i) | 0]);
      }
      zoomwall = new ZoomWall(wall);
      wall.classList.remove("loading");
    });
  };

  const filterMemes = (memeType) => {
    const items = wall.querySelectorAll("[data-types]");
    items.forEach((item) => {
      if (item.dataset.types.split("|").includes(memeType)) {
        item.querySelector("img").style.removeProperty("width");
        item.querySelector("img").style.removeProperty("height");
        item.querySelector("img").classList.remove("hidden");
      } else {
        item.querySelector("img").classList.add("hidden");
      }
    });
    updateCount();
    wall.classList.add("loading");
    zoomwall.reset();
    if (wall.querySelectorAll("img:not(.hidden)").length === 1) {
      zoomwall.toggleItem({
        target: wall.querySelector("img:not(.hidden)"),
        stopPropagation: () => {},
      });
    }
    wall.classList.remove("loading");
  };

  document.querySelector("button").addEventListener("click", shuffle);
  document
    .querySelector("select")
    .addEventListener("change", (event) => filterMemes(event.target.value));
</script>
