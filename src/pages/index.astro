---
import { renderPicture } from "astro-imagetools/api";

import Head from "../components/Head.astro";
import Loader from "../components/Loader.astro";
import StyledSelect from "../components/StyledSelect.astro";
import Icon from "../components/Icon.astro";
import { memes, memeTypes } from "../dataset.mjs";

import styles from "../styles/styles.css";
import suchoLogo from "../img/sucho-logo.32x32.png";

// Given a <picture/> element as am HTML string (as returned by renderPicture),
// extract the srcset attribute values and return an object of the form
// { <ext>: <srcset>, ... }
const getSrcsetFromPicture = (picture) =>
  Object.fromEntries(
    [...picture.matchAll(/srcset="(?<s>[^"]*?)"/g)].map((s) => [
      s[1].match(/(?<=\.)[^\s.]+(?=\s|$)/)[0],
      s.groups.s,
    ]),
  );

const title = "SUCHO Meme Wall";
const description =
  "Collected memes from the SUCHO project concerning the Russian invasion of Ukraine.";
---


<html lang="en">
  <Head {title} {description} />
  <body>
    <header>
      <h1>
        <img src={suchoLogo} alt="SUCHO" />
        <a href={Astro.site.pathname} title="SUCHO Meme Wall"
          >SUCHO Meme Wall
        </a>
      </h1>
      <div class="controls">
        <span class="count">{memes.length} / {memes.length}</span>
        <StyledSelect title="Filter Memes">
          <option value="" disabled selected>-- Filter by Meme Type --</option>
          {Array.from(memeTypes).map((memeType) => (
            <option
              value={memeType}
              set:text={`${memeType} [${
                memes.filter((meme) => meme.memeTypes.includes(memeType)).length
              }]`}
            />
          ))}
        </StyledSelect>
        <div class="search">
          <button class="search" title="Search Memes"
            ><Icon name="search" />
          </button>
          <input id="search-input" type="text" />
          <label for="search-input" class="visually-hidden">Search Term</label>
        </div>
        <button class="shuffle" title="Shuffle Memes"
          ><Icon name="shuffle" />
        </button>
      </div>
    </header>
    <main id="meme-wall" class="loading">
      {memes.map(async (meme) => {
        const { picture } = await renderPicture({
          src: "/src/../meme_media/" + meme.filename,
          fallbackFormat: "jpeg",
          format: "webp",
          alt: meme.title,
          placeholder: "none",
          includeSourceFormat: false,
        })
        const srcsets = getSrcsetFromPicture(picture)

        return (
          <picture data-types={meme.memeTypes.join("|")}>
            <source srcset={srcsets.webp} type="image/webp" sizes="15vmax" />
            <img
              data-src={srcsets.jpg}
              style={`aspect-ratio: ${meme.aspectRatio};background-image: url(${meme.thumbnail})`}
              loading="lazy"
              decoding="async"
              alt={meme.title}
              sizes="15vmax"
            />
            <dl>
              <dt>Title</dt>
              <dd>{meme.title || "---"}</dd>
              <dt>Translation</dt>
              <dd>{meme.textTranslatedIntoEnglish || "---"}</dd>
              <dt>Content Type</dt>
              <dd>{meme.memeContentType || "---"}</dd>
              <dt>Country</dt>
              <dd>{meme.country || "---"}</dd>
              <dt>Language</dt>
              <dd>{meme.language || "---"}</dd>
              <dt>Template Type</dt>
              <dd>{meme.memeTemplateType || "---"}</dd>
              <dt>People</dt>
              <dd>{meme.peopleIndividuals || "---"}</dd>
            </dl>
          </picture>
        )
      })}
    </main>
    <Loader />
    <script type="module" hoist>
      import "../js/script.js";
    </script>
  </body>
</html>
