---
import Head from "../components/Head.astro";
import StyledSelect from "../components/StyledSelect.astro";
import { memes, memeTypes } from "../dataset.mjs";

const title = "Memes";
---

<html lang="en">
  <Head {title} />
  <body>
    <header>
      <h1>SUCHO Memes Gallery</h1>
      <button>Randomize</button>
      <StyledSelect>
        <option value="" disabled selected>---</option>
        {Array.from(memeTypes).map(memeType => (
          <option key={memeType} value={memeType}>
            {memeType} {memes.filter(meme => meme.memeTypes.includes(memeType)).length}
          </option>
        ))}        
      </StyledSelect>
    </header>
    <main id="gallery" class="loading">
      {memes.map((meme, idx) => (
        <div data-types={meme.memeTypes.join("|")}>
          { (idx < 20) ?
            <img
              src={Astro.site.pathname + meme.mediaPath}
              style={`aspect-ratio: ${meme.mediaAspectRatio}`}
            />
            :
            <img
              data-src={Astro.site.pathname + meme.mediaPath}
              style={`aspect-ratio: ${meme.mediaAspectRatio}`}
            />
          }
          <section>
            <dl>
              <dt>Title:</dt>
              <dd>{meme.title}</dd>
              <dt>Translation:</dt>
              <dd>{meme.textTranslatedIntoEnglish}</dd>
            </dl>
          </section>
        </div>
      ))}
    </main>
  </body>
</html>

<script type="module" hoist>
  import ZoomWall from "../lib/zoomwall.js";

  let zoomwall;
  const gallery = document.getElementById("gallery");
  
  zoomwall = new ZoomWall(gallery);
  zoomwall.resize().then(() => {
    gallery.classList.remove("loading");
  });  

  const enableLazyLoading = () => {
    const images = gallery.querySelectorAll("[data-src]");

    const imageObserver = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const image = entry.target;
            image.src = image.dataset.src;
            image.removeAttribute("data-src");
            imageObserver.unobserve(image);
          }
        });
      },
      { root: gallery, rootMargin: "0px 0px 100% 0px" },
    );

    images.forEach((image) => imageObserver.observe(image));
  };

  document.addEventListener("DOMContentLoaded", enableLazyLoading);

  let memes;
  fetch("./memes.json")
    .then((resp) => resp.json())
    .then((json) => (memes = json));

  const shuffleArray = (array) => {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  };

  const randomize = () => {
    const gallery = document.getElementById("gallery");
    zoomwall.destroy();
    gallery.innerHTML = "";
    shuffleArray(memes).forEach((meme, idx) => {
      const div = document.createElement("div");
      div.dataset.types = meme.memeTypes.join("|");
      if (idx < 20) {
        div.innerHTML = `
          <img
            src="${meme.mediaPath}"
            style="aspect-ratio: ${meme.mediaAspectRatio}"/>`;
      } else {
        div.innerHTML = `
          <img
            data-src="${meme.mediaPath}"
            style="aspect-ratio: ${meme.mediaAspectRatio}"/>`;
      }
      div.innerHTML += `
          <section>
            <dl>
              <dt>Title:</dt>
              <dd>${meme.title}</dd>
              <dt>Translation:</dt>
              <dd>${meme.textTranslatedIntoEnglish}</dd>
            </dl>
          </section>
        `;
      gallery.appendChild(div);
    });
    zoomwall = new ZoomWall(gallery);
    enableLazyLoading();
  };

  const filterMemes = (memeType) => {
    const items = gallery.querySelectorAll("[data-types]");
    items.forEach(item => {
      if (item.dataset.types.split("|").includes(memeType)) {
        item.querySelector("img").style.removeProperty('width');
        item.querySelector("img").style.removeProperty('height');
        item.querySelector("img").classList.remove("hidden");
      } else {
        item.querySelector("img").classList.add("hidden");
      }
    })
    gallery.classList.add("loading");
      zoomwall.resize().then(() => {
        if (gallery.querySelectorAll("img:not(.hidden)").length === 1) {
          zoomwall.toggleItem({target: gallery.querySelector("img:not(.hidden)"), stopPropagation: () => {}});
        }
        gallery.classList.remove("loading");
      });
  }

  document.querySelector("button").addEventListener("click", randomize);
  document.querySelector("select").addEventListener("change", (event) => filterMemes(event.target.value));
</script>

<style is:global>
  body {
    background-color: #333;
    color: white;
    display: flex;
    flex-direction: column;
    font-family: sans-serif;
    height: 100vh;
    margin: 0;
    overflow: hidden;
    padding: 0;
  }

  header {
    align-items: center;
    display: flex;
    padding: 0.25em 1em;
    border-top: 5px solid #777;
    border-bottom: 5px solid #777;

    h1 {
      margin: 0;
      font-variant-caps: petite-caps;
      font-weight: 300;
    }
  }

  #gallery {
    flex-grow: 1;
    font-size: 0;
    overflow-x: hidden;
    overflow-y: scroll;
    transition: opacity 1s ease-in-out;
    
    &.loading {
      opacity: 0;
      transition: none;
    }

    div {
      display: inline;
    }

    img {
      height: 15vmax;
      opacity: 1;
      transform-origin: 0% 0%;
      transition-duration: 0.3s;
      transition-property: transform, opacity;
      transition-timing-function: ease-out;
      vertical-align: top;
      width: auto;

      &.hidden {
        display: none;
      }
    }

    section {
      display: none;
      background: rgba(0, 0, 0, 0.8);
      bottom: 0;
      color: white;
      font-size: large;
      padding: 0 1em;
      position: absolute;
      width: 100%;
      z-index: 2;

      dl {
        display: grid;
        grid-template-columns: 80px 1fr;
      }
    }

    &.zoomed {
      img {
        opacity: 0.3;
        transition-timing-function: ease-in;

        &.active {
          opacity: 1;

          & + section {
            display: block;
          }
        }
      }
    }
  }
</style>
